for (i in scorecard_df) {
df <- as.data.frame(scorecard_df[[i]])
tab <- scorecard_df[[i]]$`Service ID`[[1]]
export_excel(df, tab_name = tab, file_name = paste0(params$file_path, params$name), "existing")
}
scorecard_df[[i]]$`Service ID`[[1]]
as.character(scorecard_df[[i]]$`Service ID`[[1]])
scorecard_df[[1]][[4]]
for (i in scorecard_df) {typeof(i)}
for (i in scorecard_df) {print(typeof(i))}
for (i in scorecard_df) {df <- as.data.frame(scorecard_df[[i]]) print(typeof(i))}
for (i in scorecard_df) {df <- as.data.frame(scorecard_df[[i]]) print(typeof(i))}
for (i in scorecard_df) {print(typeof(as.data.frame(scorecard_df[[i]])))}
map(scorecard_df, export_excel)
for (i in scorecard_df) {
df <- as.data.frame(scorecard_df[[i]])
tab <- scorecard_df[[i]]$`Service ID`[[1]]
export_excel_tabs(df, tab_name = tab, file_name = paste0(params$file_path, params$name), "existing")
}
for (i in scorecard_df) {
df <- as.data.frame(scorecard_df[[i]])
tab <- df$`Service ID`[[1]]
export_excel_tabs(df = df, tab_name = tab, file_name = paste0(params$file_path, params$name), "existing")
}
write.xlsx(x = scorecard_df, file = paste0(file_path, "Text.xlsx"))
params = list(svc_id = scorecard_df$`Service ID`, file_path = "G:/Analyst Folders/Lillian/exp_planning_year/2a_proposal_scorecard_prep/outputs/", name = paste0(scorecard_df$`Service Name`, " PM for Results Teams.xlsx"))
write.xlsx(x = scorecard_df, file = paste0(params$file_path, "Text.xlsx"))
names(scorecard_df)
as.numeric(names(scorecard_df))
set_names(scorecard_df, `Service ID`)
filter(scorecard_df$`Service ID`)
for (i in scorecard_df) {print(`Service ID`)}
for (i in scorecard_df) {print(scorecard_df[[i]]`Service ID`)}
colnames(scorecard_df[[1]])
for (i in scorecard_df) {print(colnames(scorecard_df[[i]][[2]]))}
for (i in scorecard_df) {print(colnames(scorecard_df[[i]][2]))}
for (i in scorecard_df[[i]]) {print(colnames(scorecard_df[[i]][2]))}
for (i in scorecard_df[[i]]) {print(colnames(scorecard_df[[i]])[[2]])}
for (i in scorecard_df) {print(colnames(scorecard_df[[i]])[2])}
for (i in scorecard_df) {print(colnames(scorecard_df[[i]]))}
for (i in scorecard_df[[1]]) {print(colnames(scorecard_df[[i]]))}
for (i in scorecard_df[[i]]) {print(colnames(scorecard_df[[i]]))}
for (i in scorecard_df) {print(colnames(scorecard_df[[i]]))}
for (i,j in scorecard_df) {print(colnames(scorecard_df[[i]]))}
scorecard_df[[5]]
colnames(scorecard_df[[5]])[2]
scorecard_df[[5]][[2]]
scorecard_df[[5]][[2]][[1]]
for (i in scorecard_df) {
df <- as.data.frame(scorecard_df[[i]])
tab <- scorecard_df[[i]][[2]][[1]]
export_excel_tabs(df = df, tab_name = tab, file_name = paste0(params$file_path, params$name), "existing")
}
scorecard_df[[5]][[2]]
scorecard_df[[5]]
for (i in scorecard_df) {print(i)}
as.data.frame(scorecard_df[[5]])
for (i in scorecard_df) {
df <- as.data.frame(scorecard_df[[i]])
tab <- scorecard_df[[i]][[2]][[1]]
export_excel_tabs(df = df, tab_name = tab, file_name = paste0(params$file_path, params$name), "existing")
}
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
unlist()
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame) %>%
map(set_names)
output <- map(scorecard_df, ~paste0('df-', .)) %>%
setNames(scorecard_df)
View(output)
output <- map(scorecard_df, %>%
setNames(scorecard_df)
output <- map(scorecard_df) %>%
setNames(scorecard_df)
output <- map(scorecard_df, ~paste0(`Service ID`)) %>%
setNames(scorecard_df)
output <- map(scorecard_df, ~paste0("`Service ID`")) %>%
setNames(scorecard_df)
View(output)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame) %>%
purrr:set_names()
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame) %>%
set_names()
View(scorecard)
svc_id <- scorecard$services$`Service ID`
view(svc_id)
View(scorecard_df)
scorecard_export <- scorecard$value%>%
select(`Service Name`, `Service ID`, `Type`, `Measure`, `Target 2021`, `Actual 2021`, `Target 2022`, `Target 2023`) %>%
mutate(`Service Name` = gsub(".*:", "", `Service Name`)) %>%
order(`Service ID`)
scorecard_export[order(`Service ID`)]
scorecard_export <- scorecard$value%>%
select(`Service Name`, `Service ID`, `Type`, `Measure`, `Target 2021`, `Actual 2021`, `Target 2022`, `Target 2023`) %>%
mutate(`Service Name` = gsub(".*:", "", `Service Name`))
scorecard_pivot <- scorecard_export %>%
group_split(`Service Name`) %>%
as.list(name = `Service Name`) %>%
map(pivot_wider)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame)
names(scorecard_df) = names
names(scorecard) = names
View(scorecard)
list_test = vector("list", 180)
View(list_test)
names(scorecard)
names(scorecard_df)
list1 <- map(setnames, scorecard_df, names)
list1 <- map(setNames, scorecard_df, names)
list1 <- map(set_names, scorecard_df, names)
list1 <- map(.y = set_names, .x= scorecard_df, names)
names(scorecard_df)
rownames(scorecard_df)
colnames(scorecard_df)
scorecard_df.list
?set_names()
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame) %>%
set_names(nm = score_export$`Service ID`)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame) %>%
set_names(nm = `Service ID`)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(nm = `Service ID`)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(nm = scorecard_export$`Service ID`)
names_list <- vector(scorecard_export$`Service ID`)
names_list <- list(scorecard_export$`Service ID`)
scorecard_export$`Service ID`
list(scorecard_export$`Service ID`)
names_list <- list(scorecard_export$`Service ID`)
View(names_list)
names_list <- scorecard_export$`Service ID`
names_list <- set(scorecard_export$`Service ID`)
names_list <- list(unique(scorecard_export$`Service ID`))
View(names_list)
names_list <- unique(scorecard_export$`Service ID`)
names_list <- list(unique(scorecard_export$`Service ID`))
names_list[order(names_list)]
names_list <- list(unique(as.numeric(scorecard_export$`Service ID`)))
names_list[order(names_list)]
View(names_list)
names_list <- list(unique(as.numeric(scorecard_export$`Service ID`)))
names_list[order(names_list)]
names_list[order(names_list)]
names_list <- list(unique(as.numeric(scorecard_export$`Service ID`)))
names_list
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(nm = names_list) %>%
map(pivot_wider) %>%
map(as.data.frame)
names_list <- as.vector(unique(as.numeric(scorecard_export$`Service ID`)))
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(nm = names_list) %>%
map(pivot_wider) %>%
map(as.data.frame)
names_list <- as.factor(unique(as.numeric(scorecard_export$`Service ID`)))
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(nm = names_list)
scorecard_export <- scorecard$value%>%
select(`Service Name`, `Service ID`, `Type`, `Measure`, `Target 2021`, `Actual 2021`, `Target 2022`, `Target 2023`) %>%
mutate(`Service Name` = gsub(".*:", "", `Service Name`))
scorecard_pivot <- scorecard_export %>%
group_split(`Service Name`) %>%
as.list(name = `Service Name`) %>%
map(pivot_wider)
names_list <- as.factor(unique(as.numeric(scorecard_export$`Service ID`)))
names_list <- as.data.frame(unique(as.numeric(scorecard_export$`Service ID`)))
View(names_list)
View(names_list)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(nm = names_list)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(names_list)
length(names_list)
length(scorecard_export)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`)
length(scorecard_df)
names_list <- unique(as.numeric(scorecard_export$`Service ID`))
length(names_list)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(names_list)
scorecard_export <- scorecard$value%>%
!is.na() %>%
select(`Service Name`, `Service ID`, `Type`, `Measure`, `Target 2021`, `Actual 2021`, `Target 2022`, `Target 2023`) %>%
mutate(`Service Name` = gsub(".*:", "", `Service Name`))
scorecard_export <- scorecard$value%>%
!is.na(`Service ID`) %>%
select(`Service Name`, `Service ID`, `Type`, `Measure`, `Target 2021`, `Actual 2021`, `Target 2022`, `Target 2023`) %>%
mutate(`Service Name` = gsub(".*:", "", `Service Name`))
scorecard_export <- scorecard$value%>%
select(`Service Name`, `Service ID`, `Type`, `Measure`, `Target 2021`, `Actual 2021`, `Target 2022`, `Target 2023`) %>%
mutate(`Service Name` = gsub(".*:", "", `Service Name`)) %>%
!is.na(`Service ID`)
scorecard_export <- scorecard$value%>%
select(`Service Name`, `Service ID`, `Type`, `Measure`, `Target 2021`, `Actual 2021`, `Target 2022`, `Target 2023`) %>%
mutate(`Service Name` = gsub(".*:", "", `Service Name`)) %>%
filter(!is.na(`Service ID`))
scorecard_pivot <- scorecard_export %>%
group_split(`Service Name`) %>%
as.list(name = `Service Name`) %>%
map(pivot_wider)
names_list <- unique(as.numeric(scorecard_export$`Service ID`))
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(names_list)
names_list[order(names_list)]
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(`Service ID`)
names_list <- unique(as.numeric(scorecard_export$`Service ID`))
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
set_names(names_list, skip_absent = TRUE)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
setnames(names_list, skip_absent = TRUE)
names(scorecard_export$`Service ID`)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
mutate(result = set_names(result, `Service ID`))
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
dplyr::mutate(result = set_names(result, `Service ID`))
?mutate
library(dplyr)
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
mutate(result = set_names(result, `Service ID`))
scorecard_df <- scorecard_export %>%
group_split(`Service Name`) %>%
dplyr::mutate(result = set_names(result, `Service ID`))
scorecard$value <- map(scorecard$pm$sc.pm.id, get_sc_value) %>%
data.table::rbindlist
scorecard_df <- scorecard_export %>%
data.table::rbindlist(fill = TRUE
scorecard_df <- scorecard_export %>%
data.table::rbindlist(fill = TRUE)
?rbindlist
scorecard_df <- scorecard_export %>%
data.table::rbindlist(fill = TRUE) %>%
group_split(`Service Name`) %>%
map(pivot_wider)
scorecard_df <- scorecard_export %>%
data.table::rbindlist(use.names = FALSE, fill = TRUE) %>%
group_split(`Service Name`) %>%
map(pivot_wider)
scorecard_df <- scorecard_export %>%
data.table::rbindlist(listnames_list, use.names = FALSE, fill = TRUE)
scorecard_df <- scorecard_export %>%
data.table::rbindlist(names_list, use.names = FALSE, fill = TRUE)
scorecard$value <- map(scorecard$pm$sc.pm.id, get_sc_value)
scorecard_pivot <- scorecard_export %>%
group_split(`Service Name`) %>%
as.list(name = `Service Name`) %>%
map(pivot_wider)
scorecard_df <- scorecard_export %>%
data.table::rbindlist(l = names_list, fill = TRUE) %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame)
scorecard_df <- scorecard_export %>%
data.table::rbindlist()
scorecard_pivot <- scorecard_export %>%
group_split(`Service Name`) %>%
as.list(name = `Service Name`) %>%
map(pivot_wider)
scorecard_pivot <- scorecard_export %>%
data.table::rbindlist() %>%
group_split(`Service Name`) %>%
as.list(name = `Service Name`) %>%
map(pivot_wider)
scorecard_pivot <- scorecard_export %>%
group_split(`Service Name`) %>%
as.list(name = `Service Name`) %>%
data.table::rbindlist() %>%
map(pivot_wider)
View(scorecard_pivot)
names(scorecard_pivot)
params = list(svc_id = scorecard_df$`Service ID`, file_path = "G:/Analyst Folders/Lillian/exp_planning_year/2a_proposal_scorecard_prep/outputs/", name = paste0(scorecard_df$`Service Name`, " PM for Results Teams.xlsx"))
for (i in scorecard_df) {
df <- as.data.frame(scorecard_df[[i]])
tab <- scorecard_df[[i]][[2]][[1]]
export_excel_tabs(df = df, tab_name = tab, file_name = paste0(params$file_path, params$name), "existing")
}
scorecard_df <- scorecard_export %>%
data.table::rbindlist() %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame)
scorecard_df <- scorecard_export %>%
#data.table::rbindlist() %>%
group_split(`Service Name`) %>%
map(pivot_wider) %>%
map(as.data.frame)
for (i in scorecard_df) {
df <- as.data.frame(scorecard_df[[i]])
tab <- scorecard_df[[i]][[2]][[1]]
export_excel_tabs(df = df, tab_name = tab, file_name = paste0(params$file_path, params$name), "existing")
}
scorecard_df.list
names(scorecard_df)
write.xlsx(x = scorecard_df, file = paste0(params$file_path, "Test.xlsx"))
devtools::load_all("G:/Analyst Folders/Sara Brumfield/bbmR")
source("G:/Budget Publications/automation/0_data_prep/bookDataPrep/R/scorecard.R")
scorecard <- list(
services = get_sc_services())
.libPaths("C:/Users/sara.brumfield2/OneDrive - City Of Baltimore/Documents/r_library")
library(tidyverse)
library(magrittr)
library(rio)
library(assertthat)
library(httr)
library(jsonlite)
library(openxlsx)
library(dplyr)
install.packages("httr")
install.packages("httr")
library(httr)
scorecard <- list(
services = get_sc_services())
library(bbmR)
scorecard <- list(
services = get_sc_services())
library(jsonlite)
library(openxlsx)
library(httr)
remove.packages("httr")
library(httr)
install.packages("httr")
agency <- import("G:/Fiscal Years/Fiscal 2023/Projections Year/1. July 1 Prepwork/Appropriation File/Fiscal 2023 Appropriation File_With_Positions_WK_Accounts.xlsx",
which = "FY23 Appropriation File") %>%
set_colnames(rename_cols(.)) %>%
mutate_at(vars(ends_with("ID")), as.character) %>%
distinct(`Agency ID`, `Agency Name`, `Service ID` = `Program ID`)
.libPaths("C:/Users/sara.brumfield2/OneDrive - City Of Baltimore/Documents/r_library")
library(tidyverse)
library(magrittr)
library(rio)
library(assertthat)
library(httr)
library(jsonlite)
library(openxlsx)
library(dplyr)
install.packages("httr")
library(httr)
agency <- import("G:/Fiscal Years/Fiscal 2023/Projections Year/1. July 1 Prepwork/Appropriation File/Fiscal 2023 Appropriation File_With_Positions_WK_Accounts.xlsx",
which = "FY23 Appropriation File") %>%
set_colnames(rename_cols(.)) %>%
mutate_at(vars(ends_with("ID")), as.character) %>%
distinct(`Agency ID`, `Agency Name`, `Service ID` = `Program ID`)
devtools::load_all("G:/Analyst Folders/Sara Brumfield/bbmR")
source("G:/Budget Publications/automation/0_data_prep/bookDataPrep/R/scorecard.R")
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel")
cls <- import("G:/Fiscal Years/Fiscal 2024/Planning Year/1. CLS/1. Line Item Reports/line_items_2022-09-16_CLS_After_186.xlsx",
which = "Detail")
cls <- import("G:/Fiscal Years/Fiscal 2024/Planning Year/1. CLS/1. Line Item Reports/line_items_2022-09-16_CLS_After_186.xlsx",
which = "Details")
sum(actuals$`BAPS YTD EXP`, na.rm = TRUE)
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund"))
group_by(`Agency ID`, `Agency Name`, `Program ID`, `Program Name`, `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE))
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund"))
group_by(`Agency`, `Agency Name`, `Program ID`, `Program Name`, `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE))
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund")) %>%
group_by(`Agency ID`, `Agency Name`, `Program ID`, `Program Name`, `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE))
sum(actuals$`FY22 Actual`, na.rm = TRUE)
cls <- import("G:/Fiscal Years/Fiscal 2024/Planning Year/1. CLS/1. Line Item Reports/line_items_2022-09-16_CLS_After_186.xlsx",
which = "Details") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund")) %>%
group_by(`Agency ID`, `Agency Name`, `Program ID`, `Program Name`, `Fund`) %>%
summarise(`FY23 Budget` = sum(`FY23 Adopted`, na.rm = TRUE),
`FY24 CLS` = sum(`FY24 CLS`, na.rm = TRUE))
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID"))
View(df)
df <- cls %>% left_join(actuals %>% select(-`Agency Name`, -`Program Name`), by = c("Agency ID", "Program ID", "Fund"))
View(df)
df <- cls %>% left_join((actuals %>% select(-`Agency Name`, -`Program Name`)), by = c("Agency ID", "Program ID", "Fund"))
View(df)
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund")) %>%
group_by(`Agency ID`, `Program ID`,  `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE))
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID", "Fund"))
View(df)
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund")) %>%
group_by(`Agency ID`, `Program ID`,  `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE)) %>%
pivot_wider(names_from = Fund, values_from = `FY22 Actual`)
library(dplyr)
library(tidyverse)
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund")) %>%
group_by(`Agency ID`, `Program ID`,  `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE)) %>%
pivot_wider(names_from = Fund, values_from = `FY22 Actual`)
View(actuals)
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Fund")) %>%
group_by(`Agency ID`, `Program ID`,  `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE)) %>%
pivot_wider(names_from = Fund, values_from = `FY22 Actual`) %>%
rename(`FY22 Actual General Fund` = `General Fund`, `FY22 Actual Other Funds` = `Other Funds`)
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Funds")) %>%
group_by(`Agency ID`, `Program ID`,  `Fund`) %>%
summarise(`FY22 Actual` = sum(`BAPS YTD EXP`, na.rm = TRUE)) %>%
pivot_wider(names_from = Fund, values_from = `FY22 Actual`) %>%
rename(`FY22 Actual General Fund` = `General Fund`, `FY22 Actual Other Funds` = `Other Funds`)
View(actuals)
cls <- import("G:/Fiscal Years/Fiscal 2024/Planning Year/1. CLS/1. Line Item Reports/line_items_2022-09-16_CLS_After_186.xlsx",
which = "Details") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Funds")) %>%
group_by(`Agency ID`, `Agency Name`, `Program ID`, `Program Name`, `Fund`) %>%
summarise(`FY23 Budget` = sum(`FY23 Adopted`, na.rm = TRUE),
`FY24 CLS` = sum(`FY24 CLS`, na.rm = TRUE)) %>%
pivot_wider(names_from = Fund, values_from = c(`FY23 Budget`, `FY24 CLS`))
View(cls)
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID", "Fund"))
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID"))
View(df)
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID")) %>%
filter(!is.na(`Agency ID`)) %>%
replace_na(0)
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID")) %>%
filter(!is.na(`Agency ID`)) %>%
replace_na(is.numeric(df), 0)
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID")) %>%
filter(!is.na(`Agency ID`)) %>%
replace_na(., 0)
?replace_na
actuals <- import("G:/Fiscal Years/Fiscal 2022/Projections Year/2. Monthly Expenditure Data/Month 12_June Projections/Expenditure 2022-06_Run7.xlsx",
which = "CurrentYearExpendituresActLevel") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Funds")) %>%
group_by(`Agency ID`, `Program ID`,  `Fund`) %>%
summarise(`FY22 Actual` = replace_na(sum(`BAPS YTD EXP`, na.rm = TRUE), 0)) %>%
pivot_wider(names_from = Fund, values_from = `FY22 Actual`) %>%
rename(`FY22 Actual General Fund` = `General Fund`, `FY22 Actual Other Funds` = `Other Funds`)
#current FY, last budget
# prior_budget <- import("G:/Fiscal Years/Fiscal 2023/Projections Year/1. July 1 Prepwork/Appropriation File/Fiscal 2023 Appropriation File_With_Positions_WK_Accounts.xlsx",
#                  which = "FY23 Appropriation File") %>%
#   set_colnames(rename_cols(.)) %>%
#   mutate_at(vars(ends_with("ID")), as.character) %>%
#   distinct(`Agency ID`, `Agency Name`, `Service ID` = `Program ID`)
#current budget and prior adopted
cls <- import("G:/Fiscal Years/Fiscal 2024/Planning Year/1. CLS/1. Line Item Reports/line_items_2022-09-16_CLS_After_186.xlsx",
which = "Details") %>%
mutate(Fund = case_when(`Fund ID` == 1001 ~ "General Fund",
TRUE ~ "Other Funds")) %>%
group_by(`Agency ID`, `Agency Name`, `Program ID`, `Program Name`, `Fund`) %>%
summarise(`FY23 Budget` = replace_na(sum(`FY23 Adopted`, na.rm = TRUE), 0),
`FY24 CLS` = replace_na(sum(`FY24 CLS`, na.rm = TRUE), 0)) %>%
pivot_wider(names_from = Fund, values_from = c(`FY23 Budget`, `FY24 CLS`))
df <- cls %>% left_join(actuals, by = c("Agency ID", "Program ID")) %>%
filter(!is.na(`Agency ID`))
export_excel(df, tab_name = "FY22-FY24", "outputs/FY24 Budget Data.xlsx")
